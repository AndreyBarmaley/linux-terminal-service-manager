
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp__ltsm_dbus_proxy_h__proxy__H__
#define __sdbuscpp__ltsm_dbus_proxy_h__proxy__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace LTSM {
namespace Manager {

class Service_proxy
{
public:
    static constexpr const char* INTERFACE_NAME = "LTSM.Manager.Service";

protected:
    Service_proxy(sdbus::IProxy& proxy)
        : proxy_(proxy)
    {
        proxy_.uponSignal("helperWidgetStarted").onInterface(INTERFACE_NAME).call([this](const int32_t& display){ this->onHelperWidgetStarted(display); });
        proxy_.uponSignal("helperSetLoginPassword").onInterface(INTERFACE_NAME).call([this](const int32_t& display, const std::string& login, const std::string& pass){ this->onHelperSetLoginPassword(display, login, pass); });
        proxy_.uponSignal("helperAutoLogin").onInterface(INTERFACE_NAME).call([this](const int32_t& display, const std::string& login, const std::string& pass){ this->onHelperAutoLogin(display, login, pass); });
        proxy_.uponSignal("loginFailure").onInterface(INTERFACE_NAME).call([this](const int32_t& display, const std::string& msg){ this->onLoginFailure(display, msg); });
        proxy_.uponSignal("loginSuccess").onInterface(INTERFACE_NAME).call([this](const int32_t& display, const std::string& userName){ this->onLoginSuccess(display, userName); });
        proxy_.uponSignal("shutdownConnector").onInterface(INTERFACE_NAME).call([this](const int32_t& display){ this->onShutdownConnector(display); });
        proxy_.uponSignal("pingConnector").onInterface(INTERFACE_NAME).call([this](const int32_t& display){ this->onPingConnector(display); });
        proxy_.uponSignal("sendBellSignal").onInterface(INTERFACE_NAME).call([this](const int32_t& display){ this->onSendBellSignal(display); });
        proxy_.uponSignal("sessionReconnect").onInterface(INTERFACE_NAME).call([this](const std::string& removeAddr, const std::string& connType){ this->onSessionReconnect(removeAddr, connType); });
        proxy_.uponSignal("sessionChanged").onInterface(INTERFACE_NAME).call([this](const int32_t& display){ this->onSessionChanged(display); });
        proxy_.uponSignal("displayRemoved").onInterface(INTERFACE_NAME).call([this](const int32_t& display){ this->onDisplayRemoved(display); });
        proxy_.uponSignal("clearRenderPrimitives").onInterface(INTERFACE_NAME).call([this](const int32_t& display){ this->onClearRenderPrimitives(display); });
        proxy_.uponSignal("addRenderRect").onInterface(INTERFACE_NAME).call([this](const int32_t& display, const sdbus::Struct<int16_t, int16_t, uint16_t, uint16_t>& rect, const sdbus::Struct<uint8_t, uint8_t, uint8_t>& color, const bool& fill){ this->onAddRenderRect(display, rect, color, fill); });
        proxy_.uponSignal("addRenderText").onInterface(INTERFACE_NAME).call([this](const int32_t& display, const std::string& text, const sdbus::Struct<int16_t, int16_t>& pos, const sdbus::Struct<uint8_t, uint8_t, uint8_t>& color){ this->onAddRenderText(display, text, pos, color); });
        proxy_.uponSignal("debugLevel").onInterface(INTERFACE_NAME).call([this](const std::string& level){ this->onDebugLevel(level); });
    }

    virtual ~Service_proxy() = default;

    virtual void onHelperWidgetStarted(const int32_t& display) = 0;
    virtual void onHelperSetLoginPassword(const int32_t& display, const std::string& login, const std::string& pass) = 0;
    virtual void onHelperAutoLogin(const int32_t& display, const std::string& login, const std::string& pass) = 0;
    virtual void onLoginFailure(const int32_t& display, const std::string& msg) = 0;
    virtual void onLoginSuccess(const int32_t& display, const std::string& userName) = 0;
    virtual void onShutdownConnector(const int32_t& display) = 0;
    virtual void onPingConnector(const int32_t& display) = 0;
    virtual void onSendBellSignal(const int32_t& display) = 0;
    virtual void onSessionReconnect(const std::string& removeAddr, const std::string& connType) = 0;
    virtual void onSessionChanged(const int32_t& display) = 0;
    virtual void onDisplayRemoved(const int32_t& display) = 0;
    virtual void onClearRenderPrimitives(const int32_t& display) = 0;
    virtual void onAddRenderRect(const int32_t& display, const sdbus::Struct<int16_t, int16_t, uint16_t, uint16_t>& rect, const sdbus::Struct<uint8_t, uint8_t, uint8_t>& color, const bool& fill) = 0;
    virtual void onAddRenderText(const int32_t& display, const std::string& text, const sdbus::Struct<int16_t, int16_t>& pos, const sdbus::Struct<uint8_t, uint8_t, uint8_t>& color) = 0;
    virtual void onDebugLevel(const std::string& level) = 0;

public:
    int32_t busGetServiceVersion()
    {
        int32_t result;
        proxy_.callMethod("busGetServiceVersion").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    int32_t busStartLoginSession(const std::string& remoteAddr, const std::string& connType)
    {
        int32_t result;
        proxy_.callMethod("busStartLoginSession").onInterface(INTERFACE_NAME).withArguments(remoteAddr, connType).storeResultsTo(result);
        return result;
    }

    std::string busCreateAuthFile(const int32_t& display)
    {
        std::string result;
        proxy_.callMethod("busCreateAuthFile").onInterface(INTERFACE_NAME).withArguments(display).storeResultsTo(result);
        return result;
    }

    bool busShutdownConnector(const int32_t& display)
    {
        bool result;
        proxy_.callMethod("busShutdownConnector").onInterface(INTERFACE_NAME).withArguments(display).storeResultsTo(result);
        return result;
    }

    bool busShutdownDisplay(const int32_t& display)
    {
        bool result;
        proxy_.callMethod("busShutdownDisplay").onInterface(INTERFACE_NAME).withArguments(display).storeResultsTo(result);
        return result;
    }

    int32_t busStartUserSession(const int32_t& display, const std::string& userName, const std::string& remoteAddr, const std::string& connType)
    {
        int32_t result;
        proxy_.callMethod("busStartUserSession").onInterface(INTERFACE_NAME).withArguments(display, userName, remoteAddr, connType).storeResultsTo(result);
        return result;
    }

    bool helperIsAutoComplete(const int32_t& display)
    {
        bool result;
        proxy_.callMethod("helperIsAutoComplete").onInterface(INTERFACE_NAME).withArguments(display).storeResultsTo(result);
        return result;
    }

    bool helperIdleTimeoutAction(const int32_t& display)
    {
        bool result;
        proxy_.callMethod("helperIdleTimeoutAction").onInterface(INTERFACE_NAME).withArguments(display).storeResultsTo(result);
        return result;
    }

    int32_t helperGetIdleTimeoutSec(const int32_t& display)
    {
        int32_t result;
        proxy_.callMethod("helperGetIdleTimeoutSec").onInterface(INTERFACE_NAME).withArguments(display).storeResultsTo(result);
        return result;
    }

    std::string helperGetTitle(const int32_t& display)
    {
        std::string result;
        proxy_.callMethod("helperGetTitle").onInterface(INTERFACE_NAME).withArguments(display).storeResultsTo(result);
        return result;
    }

    std::string helperGetDateFormat(const int32_t& display)
    {
        std::string result;
        proxy_.callMethod("helperGetDateFormat").onInterface(INTERFACE_NAME).withArguments(display).storeResultsTo(result);
        return result;
    }

    std::vector<std::string> helperGetUsersList(const int32_t& display)
    {
        std::vector<std::string> result;
        proxy_.callMethod("helperGetUsersList").onInterface(INTERFACE_NAME).withArguments(display).storeResultsTo(result);
        return result;
    }

    bool helperWidgetStartedAction(const int32_t& display)
    {
        bool result;
        proxy_.callMethod("helperWidgetStartedAction").onInterface(INTERFACE_NAME).withArguments(display).storeResultsTo(result);
        return result;
    }

    bool busSendMessage(const int32_t& display, const std::string& message)
    {
        bool result;
        proxy_.callMethod("busSendMessage").onInterface(INTERFACE_NAME).withArguments(display, message).storeResultsTo(result);
        return result;
    }

    bool busSetDebugLevel(const std::string& level)
    {
        bool result;
        proxy_.callMethod("busSetDebugLevel").onInterface(INTERFACE_NAME).withArguments(level).storeResultsTo(result);
        return result;
    }

    bool busSetEncryptionInfo(const int32_t& display, const std::string& info)
    {
        bool result;
        proxy_.callMethod("busSetEncryptionInfo").onInterface(INTERFACE_NAME).withArguments(display, info).storeResultsTo(result);
        return result;
    }

    bool busSetSessionDurationSec(const int32_t& display, const uint32_t& duration)
    {
        bool result;
        proxy_.callMethod("busSetSessionDurationSec").onInterface(INTERFACE_NAME).withArguments(display, duration).storeResultsTo(result);
        return result;
    }

    bool busSetSessionPolicy(const int32_t& display, const std::string& policy)
    {
        bool result;
        proxy_.callMethod("busSetSessionPolicy").onInterface(INTERFACE_NAME).withArguments(display, policy).storeResultsTo(result);
        return result;
    }

    std::string busEncryptionInfo(const int32_t& display)
    {
        std::string result;
        proxy_.callMethod("busEncryptionInfo").onInterface(INTERFACE_NAME).withArguments(display).storeResultsTo(result);
        return result;
    }

    bool busConnectorTerminated(const int32_t& display)
    {
        bool result;
        proxy_.callMethod("busConnectorTerminated").onInterface(INTERFACE_NAME).withArguments(display).storeResultsTo(result);
        return result;
    }

    bool busConnectorSwitched(const int32_t& oldDisplay, const int32_t& newDisplay)
    {
        bool result;
        proxy_.callMethod("busConnectorSwitched").onInterface(INTERFACE_NAME).withArguments(oldDisplay, newDisplay).storeResultsTo(result);
        return result;
    }

    bool busConnectorAlive(const int32_t& display)
    {
        bool result;
        proxy_.callMethod("busConnectorAlive").onInterface(INTERFACE_NAME).withArguments(display).storeResultsTo(result);
        return result;
    }

    bool busCheckAuthenticate(const int32_t& display, const std::string& login, const std::string& password)
    {
        bool result;
        proxy_.callMethod("busCheckAuthenticate").onInterface(INTERFACE_NAME).withArguments(display, login, password).storeResultsTo(result);
        return result;
    }

    std::vector<sdbus::Struct<int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, std::string, std::string, std::string, std::string, std::string>> busGetSessions()
    {
        std::vector<sdbus::Struct<int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, std::string, std::string, std::string, std::string, std::string>> result;
        proxy_.callMethod("busGetSessions").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    bool busRenderRect(const int32_t& display, const sdbus::Struct<int16_t, int16_t, uint16_t, uint16_t>& rect, const sdbus::Struct<uint8_t, uint8_t, uint8_t>& color, const bool& fill)
    {
        bool result;
        proxy_.callMethod("busRenderRect").onInterface(INTERFACE_NAME).withArguments(display, rect, color, fill).storeResultsTo(result);
        return result;
    }

    bool busRenderText(const int32_t& display, const std::string& text, const sdbus::Struct<int16_t, int16_t>& pos, const sdbus::Struct<uint8_t, uint8_t, uint8_t>& color)
    {
        bool result;
        proxy_.callMethod("busRenderText").onInterface(INTERFACE_NAME).withArguments(display, text, pos, color).storeResultsTo(result);
        return result;
    }

    bool busRenderClear(const int32_t& display)
    {
        bool result;
        proxy_.callMethod("busRenderClear").onInterface(INTERFACE_NAME).withArguments(display).storeResultsTo(result);
        return result;
    }

private:
    sdbus::IProxy& proxy_;
};

}} // namespaces

#endif
