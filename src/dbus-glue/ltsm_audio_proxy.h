
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp__ltsm_audio_proxy_h__proxy__H__
#define __sdbuscpp__ltsm_audio_proxy_h__proxy__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace LTSM {
namespace Session {

class AUDIO_proxy
{
public:
    static constexpr const char* INTERFACE_NAME = "LTSM.Session.AUDIO";

protected:
    AUDIO_proxy(sdbus::IProxy& proxy)
        : proxy_(proxy)
    {
    }

    ~AUDIO_proxy() = default;

public:
    int32_t getVersion()
    {
        int32_t result;
        proxy_.callMethod("getVersion").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    bool connectChannel(const std::string& clientSocket)
    {
        bool result;
        proxy_.callMethod("connectChannel").onInterface(INTERFACE_NAME).withArguments(clientSocket).storeResultsTo(result);
        return result;
    }

    void disconnectChannel(const std::string& clientSocket)
    {
        proxy_.callMethod("disconnectChannel").onInterface(INTERFACE_NAME).withArguments(clientSocket);
    }

    void pulseFragmentSize(const uint32_t& sz)
    {
        proxy_.callMethod("pulseFragmentSize").onInterface(INTERFACE_NAME).withArguments(sz);
    }

    void serviceShutdown()
    {
        proxy_.callMethod("serviceShutdown").onInterface(INTERFACE_NAME);
    }

private:
    sdbus::IProxy& proxy_;
};

}} // namespaces

#endif
