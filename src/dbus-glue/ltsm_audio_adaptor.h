
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp__ltsm_audio_adaptor_h__adaptor__H__
#define __sdbuscpp__ltsm_audio_adaptor_h__adaptor__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace LTSM {
namespace Session {

class AUDIO_adaptor
{
public:
    static constexpr const char* INTERFACE_NAME = "LTSM.Session.AUDIO";

protected:
    AUDIO_adaptor(sdbus::IObject& object)
        : object_(object)
    {
        object_.registerMethod("getVersion").onInterface(INTERFACE_NAME).withOutputParamNames("version").implementedAs([this](){ return this->getVersion(); });
        object_.registerMethod("connectChannel").onInterface(INTERFACE_NAME).withInputParamNames("clientSocket").withOutputParamNames("res").implementedAs([this](const std::string& clientSocket){ return this->connectChannel(clientSocket); });
        object_.registerMethod("disconnectChannel").onInterface(INTERFACE_NAME).withInputParamNames("clientSocket").implementedAs([this](const std::string& clientSocket){ return this->disconnectChannel(clientSocket); });
        object_.registerMethod("pulseFragmentSize").onInterface(INTERFACE_NAME).withInputParamNames("sz").implementedAs([this](const uint32_t& sz){ return this->pulseFragmentSize(sz); });
        object_.registerMethod("serviceShutdown").onInterface(INTERFACE_NAME).implementedAs([this](){ return this->serviceShutdown(); });
    }

    ~AUDIO_adaptor() = default;

private:
    virtual int32_t getVersion() = 0;
    virtual bool connectChannel(const std::string& clientSocket) = 0;
    virtual void disconnectChannel(const std::string& clientSocket) = 0;
    virtual void pulseFragmentSize(const uint32_t& sz) = 0;
    virtual void serviceShutdown() = 0;

private:
    sdbus::IObject& object_;
};

}} // namespaces

#endif
