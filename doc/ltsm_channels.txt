----------| LTSM CHANNELS DESCRIPTION 0.5 |-------------

[1.0] RFB proto description:

https://vncdotool.readthedocs.io/en/0.8.0/rfbproto.html

[1.0.1] Server lists the security types (RFB 1.7.1.2)

----------+----------+------------+---------------------
 num byte | type     | value      | description
----------+----------+------------+---------------------
 4        | u32      | 77         | GSSAPI security
----------+----------+------------+---------------------

[1.0.2] Security type GSSAPI

Next step initialized GSS/API on both side;

server: gss_accept_sec_context
client: gss_init_sec_context

----------+----------+------------+---------------------
 num byte | type     | value      | description
----------+----------+------------+---------------------
 variadic | u8       |            | GSSAPI handshake
----------+----------+------------+---------------------

[1.0.3] GSSAPI continue

The client sends the json (security info):

----------+----------+------------+---------------------
 num byte | type     | value      | description
----------+----------+------------+---------------------
 4        | u32      |            | json length
 array    | u8       |            | json content
----------+----------+------------+---------------------

The server received client auth info from GSSAPI


[1.1] Client to Server Messages (RFB 1.7.4)

----------+----------+------------+---------------------
 num byte | type     | value      | description
----------+----------+------------+---------------------
 1        | u8       | 119        | LTSM type
----------+----------+------------+----------------------

Next communication continues as defined at: LTSM message format [see 1.4]


[1.2] Server to Client Messages (RFB 1.7.5)

----------+----------+------------+---------------------
 num byte | type     | value      | description
----------+----------+------------+---------------------
 1        | u8       | 119        | LTSM type
----------+----------+------------+---------------------

Next communication continues as defined at: LTSM message format [see 1.4]


[1.3] Encodings (RFB 1.7.6)

----------+----------+------------+---------------------
 num byte | type     | value      | description
----------+----------+------------+---------------------
 4        | u32      | 0x4C54534D | LTSM encoding
 4        | u32      |            | part
----------+----------+------------+---------------------

If the client supports LTSM encoding, they the server will send this message to confirm LTSM support (part: 0).



[1.4] LTSM message format

----------+----------+------------+---------------------
 num byte | type     | value      | description
----------+----------+------------+---------------------
 1        | u8       | 0x01       | protocol version
 1        | u8       |            | channel id
 2        | u16      |            | length
 array    | u8       |            | channel data
----------+----------+------------+---------------------

-----------+--------------
channel id | channel name 
-----------+--------------
 0x00      | system
 0x01      | channel data 1
 0x02      | channel data 2
 ...       | ...
 0xFE      | channel data 254
 0xFF      | reserved
-----------+--------------

All numbers (u16, u32, u64) are sent as big endian format.


[2.0] Channel DATA (stream)

Content is binary data (frame max 0xFFFF)


[2.1] Channel SYSTEM (command mode)

Content is JSON format

------------------------+-------+-----------------
 system command         | part  | direction
------------------------+-------+-----------------
 ClientOptions          | 2.1.1 | client -> server
------------------------+-------+-----------------
 ChannelClose           | 2.2.1 | any
 ChannelConnected       | 2.2.2 | client -> server
 ChannelOpen            | 2.2.3 | server -> client
 ChannelListen          | 2.2.4 | server -> client
------------------------+-------+-----------------
 TransferFiles          | 2.3.1 | client -> server
 KeyboardChange         | 2.4.1 | client -> server
 TokenAuth              | 2.6.1 | any
 LoginSuccess           | 2.7.1 | server -> client
------------------------+-------+------------------


[2.1.1] System message CLIENT OPTIONS

{ "cmd": "ClientOptions", "options": { "key1": "val1", "key2": "val2" }, "environments": { "env1": "val1", .. }, "keyboard": { "layouts": [ "ru", "fr", "en" ], "current": "ru" }}

With this message, the client provides any information in the form of a key value.
The "environments" field is a json oblect, append to session environments, TZ, LANG, LC_ and others
The "keyboard" field is a json object, keyboard layouts identifiers

-------------+--------------
 option      | description
-------------+--------------
 hostname    | possible
 ipaddr      | possible
 username    | possible
 platform    | SDL_GetPlatform
 printer     | client url socket
 sane        | client url socket
 pcscd       | client url socket
 certificate | possible
-------------+--------------


[2.2.1] System message CHANNEL CLOSE

{ "cmd": "ChannelClose", "id": int }


[2.2.2] System message CHANNEL CONNECTED

{ "cmd": "ChannelConnected", "id": int , "packed": int, "error": false }

-------+------
packed | type
-------+------
 0     | raw
 1     | zlib
-------+------

zlib: inflate/deflate algorithm used

[2.2.3] System message CHANNEL OPEN

{ "cmd": "ChannelOpen", "id": int, "type": "string", "mode": "string", "speed": "string", "packed": int }

-------+------
packed | type
-------+------
 0     | raw
 1     | zlib
-------+------

zlib: inflate/deflate algorithm used

------------------+-------
 connector type   | value
------------------+-------
 ConnectorUnix    | unix
 ConnectorSocket  | socket
 ConnectorFile    | file
 ConnectorCommand | command
------------------+------

--------------+-------
 point mode   | value
--------------+-------
 ReadOnly     | ro
 WriteOnly    | wo
 ReadWrite    | rw
--------------+------

--------------+-------
 point speed  | value
--------------+-------
 VerySlow     | very
 Slow         | slow
 Medium       | medium
 Fast         | fast
 UltraFast    | ultra
--------------+------


[2.2.3.1] System message CHANNEL OPEN UNIX (unix socket)

{ "cmd": "ChannelOpen", "id": int, "type": "unix", "path": "/path/to/unix/socket", "mode": "rw" }

allow mode: ReadOnly, WriteOnly and ReadWrite


[2.2.3.2] System message CHANNEL OPEN SOCKET (tcp socket)

{ "cmd": "ChannelOpen", "id": int, "type": "socket", "ipaddr": "127.0.0.1", "port": 12345, "mode": "rw" }

allow mode: ReadOnly, WriteOnly and ReadWrite


[2.2.3.3] System message CHANNEL OPEN FILE

{ "cmd": "ChannelOpen", "id": int, "type": "file", "path": "/path/to/file", "mode": "ro" }

allow mode: ReadOnly and WriteOnly

[2.2.3.3] System message CHANNEL OPEN COMMAND

{ "cmd": "ChannelOpen", "id": int, "type": "command", "runcmd": "/bin/cat > /tmp/file", "mode": "wo" }

allow mode: ReadOnly and WriteOnly


[2.2.4] System message CHANNEL LISTEN

{ "cmd": "ChannelListen", "id": int, "type": "string", "mode": "string" }

--------------+---------+--------
 point type   | part    | value
--------------+---------+--------
 ClientUnix   | 2.2.4.1 | unix
 ClientSocket | 2.2.4.2 | socket
--------------+---------+--------

--------------+-------
 point mode   | value
--------------+-------
 ReadOnly     | ro
 WriteOnly    | wo
 ReadWrite    | rw
--------------+------


[2.2.4.1] System message CHANNEL LISTEN UNIX (unix socket)

{ "cmd": "ChannelListen", "id": int, "type": "unix", "path": "/path/to/unix/socket", "mode": "rw" }


[2.2.4.2] System message CHANNEL LISTEN SOCKET (tcp socket)

{ "cmd": "ChannelListen", "id": int, "type": "socket", "ipaddr": "127.0.0.1", "port": 12345, "mode": "rw" }

allow mode: ReadOnly, WriteOnly and ReadWrite


[2.3.1] System message TRANSFER FILES

{ "cmd": "TransferFiles", "files": [ { "file": "path_to_file1", "size": 12345 }, ... ] }

the client requests the ability to transfer the files.


[2.4.1] System message KEYBOARD CHANGE

{ "cmd": "KeyboardChange", "layout": "ru" }

all supported keyboard layouts are transmitted in advance via the environment:keyboard.


[2.6.1] System message TOKEN AUTH

{ "cmd": "TokenAuth", "action": string }

-----------+---------+------------------+-------------
 action    | part    | direct           | description
-----------+---------+------------------+-------------
 attach    | 2.6.1.1 | client -> server | token attach
 detach    | 2.6.1.2 | client -> server | token detach
 check     | 2.6.1.3 | server -> client | check pkcs7
 reply     | 2.6.1.4 | client -> client | reply decrypt


[2.6.1.1] System message RUTOKEN ATTACH

{ "cmd": "TokenAuth", "action": "attach", "serial": string, "description": string, "certs": [ "cert1", "cert2", "cert3", ...] }

the "certs" field is list with certificates content

[2.6.1.2] System message RUTOKEN DETACH

{ "cmd": "TokenAuth", "action": "detach", "serial": string }


[2.6.1.3] System message RUTOKEN CHECK pkcs7

{ "cmd": "TokenAuth", "action": "check", "serial": string, "pin": string, "cert": int, "data": string }

the "cert" field is integer(crc32b) from certificate content
the "data" field is a binary data format, see 2.6.2


[2.6.1.4] System message RUTOKEN REPLY decrypt

{ "cmd": "TokenAuth", "action": "reply", "serial": string, "cert": int, "decrypt": string }

the "cert" field is integer(crc32b) from certificate content


[2.6.2] TOKEN AUTH binary data format [binary to string]

[ base64 encode string [ uin32be_t raw size data [ uint8_t[] gzip::compress binary data ]]]


[2.7.1] System message LOGIN SUCCESS

{ "cmd": "LoginSuccess", "action": bool, "error": string }


[2.8] Channel AUDIO

Initial part from session side, see 2.8.1
All numbers (u16, u32, u64) are sent as little endian format.

---------------+--------+---------+--------
 commands      | value  | session | client
---------------+--------+---------+--------
 AudioOp::Init | 0xFE01 | 2.8.1   | 2.8.3
 AudioOp::Data | 0xFE02 | 2.8.2   | 2.8.4
---------------+--------+---------+--------

----------+--------------
 encoding | value
----------+--------------
 PCM      | 0
 OPUS     | 1
 AAC      | 2
----------+--------------

encoding structure:
----------+----------+------------+---------------------
 num byte | type     | value      | description
----------+----------+------------+---------------------
 2        | u16      |            | type
 2        | u16      |            | channel
 4        | u32      | 44100 etc  | sample rate
 2        | u16      | 16, 24, 32 | bits per sample
----------+----------+------------+---------------------

[2.8.1] Channel AUDIO send Init (session side)

----------+----------+------------+---------------------
 num byte | type     | value      | description
----------+----------+------------+---------------------
 2        | u16      | 0xFE01     | AudioOp::Init
 2        | u16      | 1          | proto version
 2        | u16      |            | encodings count
 variadic | u8       |            | encodings data
----------+----------+------------+---------------------

[2.8.2] Channel AUDIO send Data (session side)

----------+----------+------------+---------------------
 num byte | type     | value      | description
----------+----------+------------+---------------------
 2        | u16      | 0xFE02     | AudioOp::Data
 4        | u32      |            | length
 array    | u8       |            | raw audio data
----------+----------+------------+---------------------

[2.8.3] Channel AUDIO reply Init (client side)

----------+----------+------------+---------------------
 num byte | type     | value      | description
----------+----------+------------+---------------------
 2        | u16      | 0xFE01     | AudioOp::Init
 2        | u16      | 0          | no error
 2        | u16      | 1          | proto version
 2        | u16      |            | selected encoding
----------+----------+------------+---------------------

[2.8.3.1] Channel AUDIO reply Init failed (client side)

----------+----------+------------+---------------------
 num byte | type     | value      | description
----------+----------+------------+---------------------
 2        | u16      | 0xFE01     | AudioOp::Init
 2        | u16      |            | error length
 string   | u8       |            | error message
----------+----------+------------+---------------------

[2.9] Channel FUSE

Initial part from session side, see 2.9.1
All numbers (u16, u32, u64) are sent as little endian format.

-----------------+--------+---------+---------
 commands        | value  | session | client
-----------------+--------+---------+---------
 FuseOp::Init    | 0xFF01 | 2.9.1   | 2.9.2
 FuseOp::Quit    | 0xFF02 | 2.9.3   | 2.9.4
 FuseOp::GetAttr | 0xFF03 | 2.9.5   | 2.9.6
 FuseOp::Open    | 0xFF04 | 2.9.7   | 2.9.8
 FuseOp::Read    | 0xFF05 | 2.9.9   | 2.9.10
 FuseOp::Release | 0xFF06 | 2.9.11  | 2.9.12
-----------------+--------+---------+---------

stat structure:
----------+----------+------------+---------------------
 num byte | type     | value      | description
----------+----------+------------+---------------------
 8        | u64      |            | st_dev
 8        | u64      |            | st_ino
 4        | u32      |            | st_mode
 8        | u64      |            | st_nlink
 4        | u32      |            | st_uid
 4        | u32      |            | st_gid
 8        | u64      |            | st_rdev
 8        | u64      |            | st_size
 8        | u64      |            | st_blksize
 8        | u64      |            | st_blocks
 8        | u64      |            | st_atime
 8        | u64      |            | st_mtime
 8        | u64      |            | st_ctime
----------+----------+------------+---------------------

[2.9.1] Channel FUSE send Init (session side)

----------+----------+------------+---------------------
 num byte | type     | value      | description
----------+----------+------------+---------------------
 2        | u16      | 0xFF01     | FuseOp::Init
 2        | u16      | 1          | proto version
 2        | u16      | length     | remote mount point
 variadic | u8       | string     | remote mount point
----------+----------+------------+---------------------

[2.9.2] Channel FUSE reply Init (client side)

----------+----------+------------+---------------------
 num byte | type     | value      | description
----------+----------+------------+---------------------
 2        | u16      | 0xFE01     | FuseOp::Init
 2        | u16      | 0          | no error
 2        | u16      | 1          | proto version
 4        | u32      |            | client uid
 4        | u32      |            | client gid
 variadic | u8       |            | inodes data
 variadic | u8       |            | symlinks data
----------+----------+------------+---------------------

[2.9.2.1] Channel FUSE reply Init failed (client side)

----------+----------+------------+---------------------
 num byte | type     | value      | description
----------+----------+------------+---------------------
 2        | u16      | 0xFE01     | FuseOp::Init
 2        | u16      |            | error length
 string   | u8       |            | error message
----------+----------+------------+---------------------

[2.9.2.2] Inodes data format

----------+----------+------------+---------------------
 num byte | type     | value      | description
----------+----------+------------+---------------------
 4        | u32      |            | inodes count
 variadic | u8       |            | inode structure
----------+----------+------------+---------------------

inode structure:
----------+----------+------------+---------------------
 num byte | type     | value      | description
----------+----------+------------+---------------------
 2        | u16      | length     | inode path
 variadic | u8       | string     | inode path
 84       | u8       |            | stat structure
----------+----------+------------+---------------------

[2.9.2.3] Symlinks data format

----------+----------+------------+---------------------
 num byte | type     | value      | description
----------+----------+------------+---------------------
 4        | u32      |            | symlinks count
 variadic | u8       |            | symlink structure
----------+----------+------------+---------------------

inode structure:
----------+----------+------------+---------------------
 num byte | type     | value      | description
----------+----------+------------+---------------------
 8        | u64      |            | ino link
 8        | u64      |            | ino path
----------+----------+------------+---------------------

[2.9.3] Channel FUSE send Quit (session side)

Used cached data.

[2.9.4] Channel FUSE reply Quit (client side)

Not usage.

[2.9.5] Channel FUSE send GetAttr (session side)

Used cached data.

[2.9.6] Channel FUSE reply GetAttr (client side)

Not usage.

[2.9.7] Channel FUSE send Open (session side)

----------+----------+------------+---------------------
 num byte | type     | value      | description
----------+----------+------------+---------------------
 2        | u16      | 0xFE04     | FuseOp::Open
 4        | u32      |            | open flags
 2        | u16      | length     | open path
 variadic | u8       | string     | open path
----------+----------+------------+---------------------

[2.9.8] Channel FUSE reply Open (client side)

----------+----------+------------+---------------------
 num byte | type     | value      | description
----------+----------+------------+---------------------
 2        | u16      | 0xFE04     | FuseOp::Open
 4        | u32      | 0          | errno
 4        | u32      |            | file description
----------+----------+------------+---------------------

[2.9.8.1] Channel FUSE reply Open failed (client side)

----------+----------+------------+---------------------
 num byte | type     | value      | description
----------+----------+------------+---------------------
 2        | u16      | 0xFE04     | FuseOp::Open
 4        | u32      |            | errno
----------+----------+------------+---------------------

[2.9.9] Channel FUSE send Read (session side)

----------+----------+------------+---------------------
 num byte | type     | value      | description
----------+----------+------------+---------------------
 2        | u16      | 0xFE05     | FuseOp::Read
 4        | u32      |            | file description
 2        | u16      |            | block size
 8        | u64      |            | offset
----------+----------+------------+---------------------

[2.9.10] Channel FUSE reply Read (client side)

----------+----------+------------+---------------------
 num byte | type     | value      | description
----------+----------+------------+---------------------
 2        | u16      | 0xFE05     | FuseOp::Read
 4        | u32      | 0          | errno
 2        | u16      |            | block size
 variadic | u8       |            | raw data
----------+----------+------------+---------------------

[2.9.10.1] Channel FUSE reply Read failed (client side)

----------+----------+------------+---------------------
 num byte | type     | value      | description
----------+----------+------------+---------------------
 2        | u16      | 0xFE05     | FuseOp::Read
 4        | u32      |            | errno
----------+----------+------------+---------------------

[2.9.11] Channel FUSE send Release (session side)

----------+----------+------------+---------------------
 num byte | type     | value      | description
----------+----------+------------+---------------------
 2        | u16      | 0xFE05     | FuseOp::Release
 4        | u32      |            | file description
----------+----------+------------+---------------------

[2.9.12] Channel FUSE reply Release (client side)

----------+----------+------------+---------------------
 num byte | type     | value      | description
----------+----------+------------+---------------------
 2        | u16      | 0xFE06     | FuseOp::Release
 4        | u32      |            | errno
----------+----------+------------+---------------------
