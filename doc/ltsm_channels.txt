------------| LTSM CHANNELS DESCRIPTION |---------------

[1.1] Client to Server Messages (RFB 1.7.4)

----------+----------+------------+---------------------
 num byte | type     | value      | description
----------+----------+------------+---------------------
 1        | u8       | 119        | LTSM type
----------+----------+------------+----------------------

Next communication continues as defined at: LTSM message format [2.0]


[1.2] Server to Client Messages (RFB 1.7.5)

----------+----------+------------+---------------------
 num byte | type     | value      | description
----------+----------+------------+---------------------
 1        | u8       | 119        | LTSM type
----------+----------+------------+---------------------

Next communication continues as defined at: LTSM message format [2.0]


[1.3] Encodings (RFB 1.7.6)

----------+----------+------------+---------------------
 num byte | type     | value      | description
----------+----------+------------+---------------------
 4        | u32      | 0x4C54534D | LTSM encoding
----------+----------+------------+---------------------

If the client supports LTSM encoding, they the server will send this message to confirm LTSM support.


[2.0] LTSM message format

----------+----------+------------+---------------------
 num byte | type     | value      | description
----------+----------+------------+---------------------
 1        | u8       | 0x01       | protocol version
 1        | u8       |            | channel id
 2        | u16      |            | length
 array    | u8       |            | channel data
----------+----------+------------+---------------------

-----------+--------------
channel id | channel name 
-----------+--------------
 0x00      | system
 0x01      | channel data 1
 0x02      | channel data 2
 ...       | ...
 0xFE      | channel data 254
 0xFF      | reserved
-----------+--------------

All numbers (u16, u32, u64) are sent as big endian format.


[2.0] Channel DATA (stream)

Content is binary data (frame max 0xFFFF)


[2.1] Channel SYSTEM (command mode)

Content is JSON format

------------------------+-------------------
 system command         | direction
------------------------+-------------------
 ClientOptions          | client -> server
------------------------+-------------------
 ChannelOpen            | server -> client
 ChannelListen          | server -> client
 ChannelConnected       | client -> server
 ChannelClose           | any
------------------------+-------------------
 TransferFiles          | client -> server
 KeyboardChange         | client -> server

------------------------+-------------------
 TokenAttach            | client -> server
 TokenDetach            | client -> server
 TokenCertificates      | server -> client
 TokenCertificates      | client -> server
 TokenEncrypt           | server -> client
 TokenEncrypted         | client -> server
 TokenDecrypt           | server -> client
 TokenDecrypted         | client -> server
------------------------+-------------------

[2.1.1] System message CLIENT OPTIONS

{ "cmd": "ClientOptions", "options": { "key1": "val1", "key2": "val2" }, "environments": { "env1": "val1", .. }, "keyboard": [ "ru", "fr", "en" ] }

With this message, the client provides any information in the form of a key value.

-------------+--------------
 option      | description
-------------+--------------
 printer     | possible
 hostname    | possible
 ipaddr      | possible
 username    | possible
 password    | possible
 ostype      | linux
 certificate | possible
----------------------------

environments: json oblect, append to session environments, TZ, LANG, LC_ and others
keyboard: json array of strings, keyboard layouts identifiers

[2.2.1] System message CHANNEL CLOSE

{ "cmd": "ChannelClose", "id": int }

[2.2.2] System message CHANNEL CONNECTED

{ "cmd": "ChannelConnected", "id": int , "error": false }

[2.2.3] System message CHANNEL OPEN

{ "cmd": "ChannelOpen", "id": int, "type": "string", "mode": "string" }

--------------+-------
 point type   | value
--------------+-------
 ClientUnix   | unix
 ClientSocket | socket
 ClientFile   | file
--------------+------

--------------+-------
 point mode   | value
--------------+-------
 ReadOnly     | ro
 WriteOnly    | wo
 ReadWrite    | rw
 Default      | xx
--------------+------

 Default mode - unix: rw, socket: rw, file(present): ro, file(not found): wo

[2.2.3.1] System message CHANNEL OPEN UNIX (unix socket)

{ "cmd": "ChannelOpen", "id": int, "type": "unix", "path": "/path/to/unix/socket", "mode": "rw" }

allow mode: ReadOnly, WriteOnly and ReadWrite

[2.2.3.2] System message CHANNEL OPEN SOCKET (tcp socket)

{ "cmd": "ChannelOpen", "id": int, "type": "socket", "ipaddr": "127.0.0.1", "port": 12345, "mode": "rw" }

allow mode: ReadOnly, WriteOnly and ReadWrite

[2.2.3.3] System message CHANNEL OPEN FILE

{ "cmd": "ChannelOpen", "id": int, "type": "file", "path": "/path/to/file", "mode": "ro" }

allow mode: ReadOnly and WriteOnly

[2.2.4] System message CHANNEL LISTEN (not implemented)

{ "cmd": "ChannelListen", "id": int, "type": "string", "mode": "string" }

--------------+-------
 point type   | value
--------------+-------
 ClientUnix   | unix
 ClientSocket | socket
--------------+------

--------------+-------
 point mode   | value
--------------+-------
 ReadOnly     | ro
 WriteOnly    | wo
 ReadWrite    | rw
--------------+------

[2.2.4.1] System message CHANNEL LISTEN UNIX (unix socket)

{ "cmd": "ChannelListen", "id": int, "type": "unix", "path": "/path/to/unix/socket", "mode": "rw" }

[2.2.4.2] System message CHANNEL LISTEN SOCKET (tcp socket)

{ "cmd": "ChannelListen", "id": int, "type": "socket", "ipaddr": "127.0.0.1", "port": 12345, "mode": "rw" }

allow mode: ReadOnly, WriteOnly and ReadWrite

[2.3.1] System message TRANSFER FILES

{ "cmd": "TransferFiles", "files": [ { "file": "path_to_file1", "size": 12345 }, ... ] }

the client requests the ability to transfer the files.

[2.4.1] System message KEYBOARD CHANGE

{ "cmd": "KeyboardChange", "layout": "ru" }

all supported keyboard layouts are transmitted in advance via the environment:keyboard.


