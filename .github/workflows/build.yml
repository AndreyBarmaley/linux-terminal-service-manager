name: SonarCloud Build
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
    SONAR_SCANNER_VERSION: 4.6.2.2472
    SONAR_SERVER_URL: "https://sonarcloud.io"
    BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory # Directory where build-wrapper output will be placed
    BUILD_TYPE: Release
    DEBIAN_FRONTEND: noninteractive

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Update packages
        run: |
         sudo apt-get update
         sudo apt-get -y upgrade
      - name: Install dependencies
        run: |
         sudo apt-get -y install dbus wget curl unzip openssl socat rsyslog zenity vncsnapshot \
           xserver-xorg-video-dummy xserver-xorg xterm x11-xserver-utils dbus-x11 \
           libexpat1 libpam0g-dev libgnutls28-dev freerdp2-dev libxcb1-dev libxcb-xtest0-dev \
           libxcb-xfixes0-dev libxcb-shm0-dev libxcb-randr0-dev libxcb-damage0-dev libxcb-keysyms1-dev \
           libxcb-xkb-dev libxkbcommon-x11-dev libsdl2-image-dev qtbase5-dev libsdbus-c++-bin libsdbus-c++-dev
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - uses: actions/checkout@v2
      - name: Set up Python 3.8 for gcovr
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: install gcovr 5.0
        run: |
          pip install gcovr==5.0 # 5.1 is not supported
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Download and set up sonar-scanner
        env:
          SONAR_SCANNER_DOWNLOAD_URL: https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${{ env.SONAR_SCANNER_VERSION }}-linux.zip
        run: |
          mkdir -p $HOME/.sonar
          curl -sSLo $HOME/.sonar/sonar-scanner.zip ${{ env.SONAR_SCANNER_DOWNLOAD_URL }} 
          unzip -o $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/
          echo "$HOME/.sonar/sonar-scanner-${{ env.SONAR_SCANNER_VERSION }}-linux/bin" >> $GITHUB_PATH
      - name: Download and set up build-wrapper
        env:
          BUILD_WRAPPER_DOWNLOAD_URL: ${{ env.SONAR_SERVER_URL }}/static/cpp/build-wrapper-linux-x86.zip
        run: |
          curl -sSLo $HOME/.sonar/build-wrapper-linux-x86.zip ${{ env.BUILD_WRAPPER_DOWNLOAD_URL }}
          unzip -o $HOME/.sonar/build-wrapper-linux-x86.zip -d $HOME/.sonar/
          echo "$HOME/.sonar/build-wrapper-linux-x86" >> $GITHUB_PATH
      - name: Run build-wrapper
        run: |
          cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DLTSM_BUILD_COVERAGE_TESTS=ON
          build-wrapper-linux-x86-64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }} cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
      - name: Prepare LTSM coverage tests
        run: |
          echo "::group::scripts"
          echo "generate certs"
          openssl req -x509 -newkey rsa:1024 -subj '/C=RU/ST=Public/L=Irkutsk/O=Org/OU=Unit/CN=ltsm-docker/emailAddress=public.irkutsk@gmail.com' -nodes -days 1 -keyout ${{github.workspace}}/etc/ltsm/server.key -out ${{github.workspace}}/etc/ltsm/server.crt
          echo "copy ltsm files"
          chmod +x ${{github.workspace}}/etc/ltsm/xclients
          sed -i -e 's|/usr/bin/Xvfb|/usr/bin/Xorg|' ${{github.workspace}}/etc/ltsm/config.json
          sed -i -e 's|ltsm-shm|adm|' ${{github.workspace}}/etc/ltsm/config.json
          sed -i -e 's|ltsm-dbus|adm|' ${{github.workspace}}/etc/ltsm/config.json
          sed -i -e 's|ltsm-xvfb|runner|' ${{github.workspace}}/etc/ltsm/config.json
          sed -i -e 's|-screen 0 %{width}x%{height}x24|-config ltsm.conf -quiet|' ${{github.workspace}}/etc/ltsm/config.json
          sed -i -e "s|/usr/libexec/ltsm|${{github.workspace}}|" ${{github.workspace}}/etc/ltsm/config.json
          sed -i -e 's|ltsm-dbus|adm|' ${{github.workspace}}/etc/dbus-1/ltsm.manager.service.conf
          echo "sudo actions"
          sudo groupadd -r ltsm-auth
          sudo cp -r ${{github.workspace}}/etc/ltsm /etc
          sudo cp ${{github.workspace}}/etc/dbus-1/ltsm.manager.service.conf /etc/dbus-1/system.d
          sudo cp ${{github.workspace}}/etc/xorg/ltsm.conf /etc/X11
          sudo sed -i -e 's|console|anybody|' /etc/X11/Xwrapper.config
          echo "::endgroup::"
      - name: Run tests to generate coverage statistics
        env:
          SOCAT_DEFAULT_LISTEN_IP: 127.0.0.1
        shell: bash
        run: |
          echo "::group::run tests"
          ./LTSM_test_framebuf
          ./LTSM_test_streambuf
          ./LTSM_test_unixsocket
          ./LTSM_test_json --config ./src/tests/json/test.json
          echo "::endgroup::"
          echo "::group::test services"
          echo "run ltsm service"
          sudo ./LTSM_service &
          sleep 5
          echo "run socat connector"
          socat TCP4-LISTEN:5907,reuseaddr EXEC:"./LTSM_connector --config /etc/ltsm/config.json --type vnc" &
          sleep 5
          echo "get vnc screenshot"
          vncsnapshot 127.0.0.1:7 test.jpg
          echo "system log"
          sleep 5
          grep -i ltsm /var/log/syslog
          echo "send shutdown service"
          dbus-send --dest=ltsm.manager.service --system --print-reply --type=method_call /ltsm/manager/service LTSM.Manager.Service.busShutdownService
          echo "wait"
          sleep 10
          echo "::endgroup::"
      - name: Collect coverage into one XML report
        run: |
          gcovr --sonarqube > coverage.xml
      - name: Run sonar-scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner --define sonar.host.url="${{ env.SONAR_SERVER_URL }}" \
            --define sonar.cfamily.build-wrapper-output="${{ env.BUILD_WRAPPER_OUT_DIR }}" \
            --define sonar.coverageReportPaths=coverage.xml
